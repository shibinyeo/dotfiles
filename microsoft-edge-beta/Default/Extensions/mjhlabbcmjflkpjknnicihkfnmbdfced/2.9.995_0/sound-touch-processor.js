!function(){"use strict";function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},t(e)}function e(e,s,i){return(s=function(e){var s=function(e,s){if("object"!==t(e)||null===e)return e;var i=e[Symbol.toPrimitive];if(void 0!==i){var r=i.call(e,"string");if("object"!==t(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===t(s)?s:String(s)}(s))in e?Object.defineProperty(e,s,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[s]=i,e}class s{constructor(){this._vector=new Float32Array,this._position=0,this._frameCount=0}get vector(){return this._vector}get position(){return this._position}get startIndex(){return 2*this._position}get frameCount(){return this._frameCount}get endIndex(){return 2*(this._position+this._frameCount)}clear(){this.receive(this._frameCount),this.rewind()}put(t){this._frameCount+=t}putSamples(t,e,s=0){const i=2*(e=e||0);s>=0||(s=(t.length-i)/2);const r=2*s;this.ensureCapacity(s+this._frameCount);const o=this.endIndex;this.vector.set(t.subarray(i,i+r),o),this._frameCount+=s}putBuffer(t,e,s=0){e=e||0,s>=0||(s=t.frameCount-e),this.putSamples(t.vector,t.position+e,s)}receive(t){t>=0&&!(t>this._frameCount)||(t=this.frameCount),this._frameCount-=t,this._position+=t}receiveSamples(t,e=0){const s=2*e,i=this.startIndex;t.set(this._vector.subarray(i,i+s)),this.receive(e)}extract(t,e=0,s=0){const i=this.startIndex+2*e,r=2*s;t.set(this._vector.subarray(i,i+r))}ensureCapacity(t=0){const e=parseInt(2*t);if(this._vector.length<e){const t=new Float32Array(e);t.set(this._vector.subarray(this.startIndex,this.endIndex)),this._vector=t,this._position=0}else this.rewind()}ensureAdditionalCapacity(t=0){this.ensureCapacity(this._frameCount+t)}rewind(){this._position>0&&(this._vector.set(this._vector.subarray(this.startIndex,this.endIndex)),this._position=0)}}class i{constructor(t){t?(this._inputBuffer=new s,this._outputBuffer=new s):this._inputBuffer=this._outputBuffer=null}get inputBuffer(){return this._inputBuffer}set inputBuffer(t){this._inputBuffer=t}get outputBuffer(){return this._outputBuffer}set outputBuffer(t){this._outputBuffer=t}clear(){this._inputBuffer.clear(),this._outputBuffer.clear()}}class r extends i{constructor(t){super(t),this.reset(),this._rate=1}set rate(t){this._rate=t}reset(){this.slopeCount=0,this.prevSampleL=0,this.prevSampleR=0}clone(){const t=new r;return t.rate=this._rate,t}process(){const t=this._inputBuffer.frameCount;this._outputBuffer.ensureAdditionalCapacity(t/this._rate+1);const e=this.transpose(t);this._inputBuffer.receive(),this._outputBuffer.put(e)}transpose(t=0){if(0===t)return 0;const e=this._inputBuffer.vector,s=this._inputBuffer.startIndex,i=this._outputBuffer.vector,r=this._outputBuffer.endIndex;let o=0,h=0;for(;this.slopeCount<1;)i[r+2*h]=(1-this.slopeCount)*this.prevSampleL+this.slopeCount*e[s],i[r+2*h+1]=(1-this.slopeCount)*this.prevSampleR+this.slopeCount*e[s+1],h+=1,this.slopeCount+=this._rate;if(this.slopeCount-=1,1!==t)t:for(;;){for(;this.slopeCount>1;)if(this.slopeCount-=1,o+=1,o>=t-1)break t;const u=s+2*o;i[r+2*h]=(1-this.slopeCount)*e[u]+this.slopeCount*e[u+2],i[r+2*h+1]=(1-this.slopeCount)*e[u+1]+this.slopeCount*e[u+3],h+=1,this.slopeCount+=this._rate}return this.prevSampleL=e[s+2*t-2],this.prevSampleR=e[s+2*t-1],h}}const o=[[124,186,248,310,372,434,496,558,620,682,744,806,868,930,992,1054,1116,1178,1240,1302,1364,1426,1488,0],[-100,-75,-50,-25,25,50,75,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-20,-15,-10,-5,5,10,15,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-4,-3,-2,-1,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]];class h extends i{constructor(t){super(t),this._quickSeek=!0,this.midBufferDirty=!1,this.midBuffer=null,this.overlapLength=0,this.autoSeqSetting=!0,this.autoSeekSetting=!0,this._tempo=1,this.setParameters(44100,0,0,8)}clear(){super.clear(),this.clearMidBuffer()}clearMidBuffer(){this.midBufferDirty&&(this.midBufferDirty=!1,this.midBuffer=null)}setParameters(t,e,s,i){t>0&&(this.sampleRate=t),i>0&&(this.overlapMs=i),e>0?(this.sequenceMs=e,this.autoSeqSetting=!1):this.autoSeqSetting=!0,s>0?(this.seekWindowMs=s,this.autoSeekSetting=!1):this.autoSeekSetting=!0,this.calculateSequenceParameters(),this.calculateOverlapLength(this.overlapMs),this.tempo=this._tempo}set tempo(t){let e;this._tempo=t,this.calculateSequenceParameters(),this.nominalSkip=this._tempo*(this.seekWindowLength-this.overlapLength),this.skipFract=0,e=Math.floor(this.nominalSkip+.5),this.sampleReq=Math.max(e+this.overlapLength,this.seekWindowLength)+this.seekLength}get tempo(){return this._tempo}get inputChunkSize(){return this.sampleReq}get outputChunkSize(){return this.overlapLength+Math.max(0,this.seekWindowLength-2*this.overlapLength)}calculateOverlapLength(t=0){let e;e=this.sampleRate*t/1e3,e=e<16?16:e,e-=e%8,this.overlapLength=e,this.refMidBuffer=new Float32Array(2*this.overlapLength),this.midBuffer=new Float32Array(2*this.overlapLength)}checkLimits(t,e,s){return t<e?e:t>s?s:t}calculateSequenceParameters(){let t,e;this.autoSeqSetting&&(t=150+-50*this._tempo,t=this.checkLimits(t,50,125),this.sequenceMs=Math.floor(t+.5)),this.autoSeekSetting&&(e=28.333333333333332+-6.666666666666667*this._tempo,e=this.checkLimits(e,15,25),this.seekWindowMs=Math.floor(e+.5)),this.seekWindowLength=Math.floor(this.sampleRate*this.sequenceMs/1e3),this.seekLength=Math.floor(this.sampleRate*this.seekWindowMs/1e3)}set quickSeek(t){this._quickSeek=t}clone(){const t=new h;return t.tempo=this._tempo,t.setParameters(this.sampleRate,this.sequenceMs,this.seekWindowMs,this.overlapMs),t}seekBestOverlapPosition(){return this._quickSeek?this.seekBestOverlapPositionStereoQuick():this.seekBestOverlapPositionStereo()}seekBestOverlapPositionStereo(){let t,e,s,i=0;for(this.preCalculateCorrelationReferenceStereo(),t=0,e=Number.MIN_VALUE;i<this.seekLength;i+=1)s=this.calculateCrossCorrelationStereo(2*i,this.refMidBuffer),s>e&&(e=s,t=i);return t}seekBestOverlapPositionStereoQuick(){let t,e,s,i,r,h=0;for(this.preCalculateCorrelationReferenceStereo(),e=Number.MIN_VALUE,t=0,i=0,r=0;h<4;h+=1){let u=0;for(;o[h][u]&&(r=i+o[h][u],!(r>=this.seekLength));)s=this.calculateCrossCorrelationStereo(2*r,this.refMidBuffer),s>e&&(e=s,t=r),u+=1;i=t}return t}preCalculateCorrelationReferenceStereo(){let t,e,s=0;for(;s<this.overlapLength;s+=1)e=s*(this.overlapLength-s),t=2*s,this.refMidBuffer[t]=this.midBuffer[t]*e,this.refMidBuffer[t+1]=this.midBuffer[t+1]*e}calculateCrossCorrelationStereo(t,e){const s=this._inputBuffer.vector;t+=this._inputBuffer.startIndex;let i=0,r=2;const o=2*this.overlapLength;let h;for(;r<o;r+=2)h=r+t,i+=s[h]*e[r]+s[h+1]*e[r+1];return i}overlap(t){this.overlapStereo(2*t)}overlapStereo(t){const e=this._inputBuffer.vector;t+=this._inputBuffer.startIndex;const s=this._outputBuffer.vector,i=this._outputBuffer.endIndex;let r,o,h=0;const u=1/this.overlapLength;let n,a,f;for(;h<this.overlapLength;h+=1)o=(this.overlapLength-h)*u,n=h*u,r=2*h,a=r+t,f=r+i,s[f+0]=e[a+0]*n+this.midBuffer[r+0]*o,s[f+1]=e[a+1]*n+this.midBuffer[r+1]*o}process(){let t,e,s;if(null===this.midBuffer){if(this._inputBuffer.frameCount<this.overlapLength)return;this.midBuffer=new Float32Array(2*this.overlapLength),this._inputBuffer.receiveSamples(this.midBuffer,this.overlapLength)}for(;this._inputBuffer.frameCount>=this.sampleReq;){t=this.seekBestOverlapPosition(),this._outputBuffer.ensureAdditionalCapacity(this.overlapLength),this.overlap(Math.floor(t)),this._outputBuffer.put(this.overlapLength),e=this.seekWindowLength-2*this.overlapLength,e>0&&this._outputBuffer.putBuffer(this._inputBuffer,t+this.overlapLength,e);const i=this._inputBuffer.startIndex+2*(t+this.seekWindowLength-this.overlapLength);this.midBuffer.set(this._inputBuffer.vector.subarray(i,i+2*this.overlapLength)),this.skipFract+=this.nominalSkip,s=Math.floor(this.skipFract),this.skipFract-=s,this._inputBuffer.receive(s)}}}const u=function(t,e){return(t>e?t-e:e-t)>1e-10};class n{constructor(){this.transposer=new r(!1),this.stretch=new h(!1),this._inputBuffer=new s,this._intermediateBuffer=new s,this._outputBuffer=new s,this._rate=0,this._tempo=0,this.virtualPitch=1,this.virtualRate=1,this.virtualTempo=1,this.calculateEffectiveRateAndTempo()}clear(){this.transposer.clear(),this.stretch.clear()}clone(){const t=new n;return t.rate=this.rate,t.tempo=this.tempo,t}get rate(){return this._rate}set rate(t){this.virtualRate=t,this.calculateEffectiveRateAndTempo()}set rateChange(t){this._rate=1+.01*t}get tempo(){return this._tempo}set tempo(t){this.virtualTempo=t,this.calculateEffectiveRateAndTempo()}set tempoChange(t){this.tempo=1+.01*t}set pitch(t){this.virtualPitch=t,this.calculateEffectiveRateAndTempo()}set pitchOctaves(t){this.pitch=Math.exp(.69314718056*t),this.calculateEffectiveRateAndTempo()}set pitchSemitones(t){this.pitchOctaves=t/12}get inputBuffer(){return this._inputBuffer}get outputBuffer(){return this._outputBuffer}calculateEffectiveRateAndTempo(){const t=this._tempo,e=this._rate;this._tempo=this.virtualTempo/this.virtualPitch,this._rate=this.virtualRate*this.virtualPitch,u(this._tempo,t)&&(this.stretch.tempo=this._tempo),u(this._rate,e)&&(this.transposer.rate=this._rate),this._rate>1?this._outputBuffer!=this.transposer.outputBuffer&&(this.stretch.inputBuffer=this._inputBuffer,this.stretch.outputBuffer=this._intermediateBuffer,this.transposer.inputBuffer=this._intermediateBuffer,this.transposer.outputBuffer=this._outputBuffer):this._outputBuffer!=this.stretch.outputBuffer&&(this.transposer.inputBuffer=this._inputBuffer,this.transposer.outputBuffer=this._intermediateBuffer,this.stretch.inputBuffer=this._intermediateBuffer,this.stretch.outputBuffer=this._outputBuffer)}process(){this._rate>1?(this.stretch.process(),this.transposer.process()):(this.transposer.process(),this.stretch.process())}}class a extends AudioWorkletProcessor{static get parameterDescriptors(){return[{name:"semitone",defaultValue:0,automationRate:"k-rate"}]}constructor(){super(),e(this,"soundTouch",new n),e(this,"filter",new f(this.soundTouch)),e(this,"semitone",void 0),e(this,"outputBuffer",void 0),e(this,"released",void 0),this.port.onmessage=t=>{let{data:e}=t;"RELEASE"===e.type&&(this.released=!0,delete this.soundTouch,delete this.filter)}}process(t,e,s){var i,r;if(this.released)return!1;const o=t[0],h=e[0];if(!o[0])return!0;const u=o[0].length,n=o.length>1,a=null!==(i=s.semitone[0])&&void 0!==i?i:0;if(this.semitone!==a&&(this.soundTouch.pitchSemitones=a,this.semitone=a),0===this.semitone){for(let t=0;t<o.length;t++)h[t].set(o[t]);return!0}if(this.outputBuffer=(null===(r=this.outputBuffer)||void 0===r?void 0:r.length)===2*u?this.outputBuffer:new Float32Array(2*u),this.filter.push(o[0],o[1]||o[0]),this.filter.extract(this.outputBuffer,u),n)for(let t=0;t<u;t++)h[0][t]=this.outputBuffer[2*t]||0,h[1][t]=this.outputBuffer[2*t+1]||0;else for(let t=0;t<u;t++)h[0][t]=this.outputBuffer[2*t]||0;return!0}}class f{constructor(t){this._pipe=t}push(t,e){const s=new Float32Array(2*t.length);for(let i=0;i<t.length;i++)s[2*i]=t[i],s[2*i+1]=e[i];this._pipe.inputBuffer.putSamples(s,0,t.length)}extract(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:8192;this._pipe.inputBuffer.frameCount>=s&&this._pipe.process(),this._pipe.outputBuffer.receiveSamples(t,e)}}registerProcessor("sound-touch-processor",a)}();